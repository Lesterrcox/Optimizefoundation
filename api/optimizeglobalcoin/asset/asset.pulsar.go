// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package asset

import (
	fmt "fmt"
	io "io"
	reflect "reflect"
	sync "sync"

	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

var _ protoreflect.List = (*_ValueValidation_1_list)(nil)

type _ValueValidation_1_list struct {
	list *[]string
}

func (x *_ValueValidation_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ValueValidation_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_ValueValidation_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_ValueValidation_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_ValueValidation_1_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message ValueValidation at list field Validators as it is not of Message kind"))
}

func (x *_ValueValidation_1_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_ValueValidation_1_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_ValueValidation_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_ValueValidation            protoreflect.MessageDescriptor
	fd_ValueValidation_validators protoreflect.FieldDescriptor
	fd_ValueValidation_value_usd  protoreflect.FieldDescriptor
	fd_ValueValidation_timestamp  protoreflect.FieldDescriptor
)

func init() {
	file_optimizeglobalcoin_asset_asset_proto_init()
	md_ValueValidation = File_optimizeglobalcoin_asset_asset_proto.Messages().ByName("ValueValidation")
	fd_ValueValidation_validators = md_ValueValidation.Fields().ByName("validators")
	fd_ValueValidation_value_usd = md_ValueValidation.Fields().ByName("value_usd")
	fd_ValueValidation_timestamp = md_ValueValidation.Fields().ByName("timestamp")
}

var _ protoreflect.Message = (*fastReflection_ValueValidation)(nil)

type fastReflection_ValueValidation ValueValidation

func (x *ValueValidation) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ValueValidation)(x)
}

func (x *ValueValidation) slowProtoReflect() protoreflect.Message {
	mi := &file_optimizeglobalcoin_asset_asset_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ValueValidation_messageType fastReflection_ValueValidation_messageType
var _ protoreflect.MessageType = fastReflection_ValueValidation_messageType{}

type fastReflection_ValueValidation_messageType struct{}

func (x fastReflection_ValueValidation_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ValueValidation)(nil)
}
func (x fastReflection_ValueValidation_messageType) New() protoreflect.Message {
	return new(fastReflection_ValueValidation)
}
func (x fastReflection_ValueValidation_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ValueValidation
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ValueValidation) Descriptor() protoreflect.MessageDescriptor {
	return md_ValueValidation
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ValueValidation) Type() protoreflect.MessageType {
	return _fastReflection_ValueValidation_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ValueValidation) New() protoreflect.Message {
	return new(fastReflection_ValueValidation)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ValueValidation) Interface() protoreflect.ProtoMessage {
	return (*ValueValidation)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ValueValidation) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Validators) != 0 {
		value := protoreflect.ValueOfList(&_ValueValidation_1_list{list: &x.Validators})
		if !f(fd_ValueValidation_validators, value) {
			return
		}
	}
	if x.ValueUsd != "" {
		value := protoreflect.ValueOfString(x.ValueUsd)
		if !f(fd_ValueValidation_value_usd, value) {
			return
		}
	}
	if x.Timestamp != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Timestamp)
		if !f(fd_ValueValidation_timestamp, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ValueValidation) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "optimizeglobalcoin.asset.ValueValidation.validators":
		return len(x.Validators) != 0
	case "optimizeglobalcoin.asset.ValueValidation.value_usd":
		return x.ValueUsd != ""
	case "optimizeglobalcoin.asset.ValueValidation.timestamp":
		return x.Timestamp != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: optimizeglobalcoin.asset.ValueValidation"))
		}
		panic(fmt.Errorf("message optimizeglobalcoin.asset.ValueValidation does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValueValidation) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "optimizeglobalcoin.asset.ValueValidation.validators":
		x.Validators = nil
	case "optimizeglobalcoin.asset.ValueValidation.value_usd":
		x.ValueUsd = ""
	case "optimizeglobalcoin.asset.ValueValidation.timestamp":
		x.Timestamp = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: optimizeglobalcoin.asset.ValueValidation"))
		}
		panic(fmt.Errorf("message optimizeglobalcoin.asset.ValueValidation does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ValueValidation) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "optimizeglobalcoin.asset.ValueValidation.validators":
		if len(x.Validators) == 0 {
			return protoreflect.ValueOfList(&_ValueValidation_1_list{})
		}
		listValue := &_ValueValidation_1_list{list: &x.Validators}
		return protoreflect.ValueOfList(listValue)
	case "optimizeglobalcoin.asset.ValueValidation.value_usd":
		value := x.ValueUsd
		return protoreflect.ValueOfString(value)
	case "optimizeglobalcoin.asset.ValueValidation.timestamp":
		value := x.Timestamp
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: optimizeglobalcoin.asset.ValueValidation"))
		}
		panic(fmt.Errorf("message optimizeglobalcoin.asset.ValueValidation does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValueValidation) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "optimizeglobalcoin.asset.ValueValidation.validators":
		lv := value.List()
		clv := lv.(*_ValueValidation_1_list)
		x.Validators = *clv.list
	case "optimizeglobalcoin.asset.ValueValidation.value_usd":
		x.ValueUsd = value.Interface().(string)
	case "optimizeglobalcoin.asset.ValueValidation.timestamp":
		x.Timestamp = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: optimizeglobalcoin.asset.ValueValidation"))
		}
		panic(fmt.Errorf("message optimizeglobalcoin.asset.ValueValidation does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValueValidation) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "optimizeglobalcoin.asset.ValueValidation.validators":
		if x.Validators == nil {
			x.Validators = []string{}
		}
		value := &_ValueValidation_1_list{list: &x.Validators}
		return protoreflect.ValueOfList(value)
	case "optimizeglobalcoin.asset.ValueValidation.value_usd":
		panic(fmt.Errorf("field value_usd of message optimizeglobalcoin.asset.ValueValidation is not mutable"))
	case "optimizeglobalcoin.asset.ValueValidation.timestamp":
		panic(fmt.Errorf("field timestamp of message optimizeglobalcoin.asset.ValueValidation is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: optimizeglobalcoin.asset.ValueValidation"))
		}
		panic(fmt.Errorf("message optimizeglobalcoin.asset.ValueValidation does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ValueValidation) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "optimizeglobalcoin.asset.ValueValidation.validators":
		list := []string{}
		return protoreflect.ValueOfList(&_ValueValidation_1_list{list: &list})
	case "optimizeglobalcoin.asset.ValueValidation.value_usd":
		return protoreflect.ValueOfString("")
	case "optimizeglobalcoin.asset.ValueValidation.timestamp":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: optimizeglobalcoin.asset.ValueValidation"))
		}
		panic(fmt.Errorf("message optimizeglobalcoin.asset.ValueValidation does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ValueValidation) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in optimizeglobalcoin.asset.ValueValidation", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ValueValidation) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValueValidation) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ValueValidation) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ValueValidation) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ValueValidation)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Validators) > 0 {
			for _, s := range x.Validators {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.ValueUsd)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Timestamp != 0 {
			n += 1 + runtime.Sov(uint64(x.Timestamp))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ValueValidation)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Timestamp != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Timestamp))
			i--
			dAtA[i] = 0x18
		}
		if len(x.ValueUsd) > 0 {
			i -= len(x.ValueUsd)
			copy(dAtA[i:], x.ValueUsd)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ValueUsd)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Validators) > 0 {
			for iNdEx := len(x.Validators) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Validators[iNdEx])
				copy(dAtA[i:], x.Validators[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Validators[iNdEx])))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ValueValidation)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ValueValidation: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ValueValidation: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Validators = append(x.Validators, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValueUsd", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ValueUsd = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
				}
				x.Timestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Timestamp |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Asset              protoreflect.MessageDescriptor
	fd_Asset_id           protoreflect.FieldDescriptor
	fd_Asset_name         protoreflect.FieldDescriptor
	fd_Asset_asset_type   protoreflect.FieldDescriptor
	fd_Asset_jurisdiction protoreflect.FieldDescriptor
	fd_Asset_owner        protoreflect.FieldDescriptor
	fd_Asset_status       protoreflect.FieldDescriptor
	fd_Asset_value        protoreflect.FieldDescriptor
	fd_Asset_options      protoreflect.FieldDescriptor
	fd_Asset_timestamp    protoreflect.FieldDescriptor
)

func init() {
	file_optimizeglobalcoin_asset_asset_proto_init()
	md_Asset = File_optimizeglobalcoin_asset_asset_proto.Messages().ByName("Asset")
	fd_Asset_id = md_Asset.Fields().ByName("id")
	fd_Asset_name = md_Asset.Fields().ByName("name")
	fd_Asset_asset_type = md_Asset.Fields().ByName("asset_type")
	fd_Asset_jurisdiction = md_Asset.Fields().ByName("jurisdiction")
	fd_Asset_owner = md_Asset.Fields().ByName("owner")
	fd_Asset_status = md_Asset.Fields().ByName("status")
	fd_Asset_value = md_Asset.Fields().ByName("value")
	fd_Asset_options = md_Asset.Fields().ByName("options")
	fd_Asset_timestamp = md_Asset.Fields().ByName("timestamp")
}

var _ protoreflect.Message = (*fastReflection_Asset)(nil)

type fastReflection_Asset Asset

func (x *Asset) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Asset)(x)
}

func (x *Asset) slowProtoReflect() protoreflect.Message {
	mi := &file_optimizeglobalcoin_asset_asset_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Asset_messageType fastReflection_Asset_messageType
var _ protoreflect.MessageType = fastReflection_Asset_messageType{}

type fastReflection_Asset_messageType struct{}

func (x fastReflection_Asset_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Asset)(nil)
}
func (x fastReflection_Asset_messageType) New() protoreflect.Message {
	return new(fastReflection_Asset)
}
func (x fastReflection_Asset_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Asset
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Asset) Descriptor() protoreflect.MessageDescriptor {
	return md_Asset
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Asset) Type() protoreflect.MessageType {
	return _fastReflection_Asset_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Asset) New() protoreflect.Message {
	return new(fastReflection_Asset)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Asset) Interface() protoreflect.ProtoMessage {
	return (*Asset)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Asset) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_Asset_id, value) {
			return
		}
	}
	if x.Name != "" {
		value := protoreflect.ValueOfString(x.Name)
		if !f(fd_Asset_name, value) {
			return
		}
	}
	if x.AssetType != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.AssetType))
		if !f(fd_Asset_asset_type, value) {
			return
		}
	}
	if x.Jurisdiction != "" {
		value := protoreflect.ValueOfString(x.Jurisdiction)
		if !f(fd_Asset_jurisdiction, value) {
			return
		}
	}
	if x.Owner != "" {
		value := protoreflect.ValueOfString(x.Owner)
		if !f(fd_Asset_owner, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_Asset_status, value) {
			return
		}
	}
	if x.Value != nil {
		value := protoreflect.ValueOfMessage(x.Value.ProtoReflect())
		if !f(fd_Asset_value, value) {
			return
		}
	}
	if x.Options != "" {
		value := protoreflect.ValueOfString(x.Options)
		if !f(fd_Asset_options, value) {
			return
		}
	}
	if x.Timestamp != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Timestamp)
		if !f(fd_Asset_timestamp, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Asset) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "optimizeglobalcoin.asset.Asset.id":
		return x.Id != uint64(0)
	case "optimizeglobalcoin.asset.Asset.name":
		return x.Name != ""
	case "optimizeglobalcoin.asset.Asset.asset_type":
		return x.AssetType != 0
	case "optimizeglobalcoin.asset.Asset.jurisdiction":
		return x.Jurisdiction != ""
	case "optimizeglobalcoin.asset.Asset.owner":
		return x.Owner != ""
	case "optimizeglobalcoin.asset.Asset.status":
		return x.Status != 0
	case "optimizeglobalcoin.asset.Asset.value":
		return x.Value != nil
	case "optimizeglobalcoin.asset.Asset.options":
		return x.Options != ""
	case "optimizeglobalcoin.asset.Asset.timestamp":
		return x.Timestamp != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: optimizeglobalcoin.asset.Asset"))
		}
		panic(fmt.Errorf("message optimizeglobalcoin.asset.Asset does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Asset) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "optimizeglobalcoin.asset.Asset.id":
		x.Id = uint64(0)
	case "optimizeglobalcoin.asset.Asset.name":
		x.Name = ""
	case "optimizeglobalcoin.asset.Asset.asset_type":
		x.AssetType = 0
	case "optimizeglobalcoin.asset.Asset.jurisdiction":
		x.Jurisdiction = ""
	case "optimizeglobalcoin.asset.Asset.owner":
		x.Owner = ""
	case "optimizeglobalcoin.asset.Asset.status":
		x.Status = 0
	case "optimizeglobalcoin.asset.Asset.value":
		x.Value = nil
	case "optimizeglobalcoin.asset.Asset.options":
		x.Options = ""
	case "optimizeglobalcoin.asset.Asset.timestamp":
		x.Timestamp = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: optimizeglobalcoin.asset.Asset"))
		}
		panic(fmt.Errorf("message optimizeglobalcoin.asset.Asset does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Asset) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "optimizeglobalcoin.asset.Asset.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "optimizeglobalcoin.asset.Asset.name":
		value := x.Name
		return protoreflect.ValueOfString(value)
	case "optimizeglobalcoin.asset.Asset.asset_type":
		value := x.AssetType
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "optimizeglobalcoin.asset.Asset.jurisdiction":
		value := x.Jurisdiction
		return protoreflect.ValueOfString(value)
	case "optimizeglobalcoin.asset.Asset.owner":
		value := x.Owner
		return protoreflect.ValueOfString(value)
	case "optimizeglobalcoin.asset.Asset.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "optimizeglobalcoin.asset.Asset.value":
		value := x.Value
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "optimizeglobalcoin.asset.Asset.options":
		value := x.Options
		return protoreflect.ValueOfString(value)
	case "optimizeglobalcoin.asset.Asset.timestamp":
		value := x.Timestamp
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: optimizeglobalcoin.asset.Asset"))
		}
		panic(fmt.Errorf("message optimizeglobalcoin.asset.Asset does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Asset) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "optimizeglobalcoin.asset.Asset.id":
		x.Id = value.Uint()
	case "optimizeglobalcoin.asset.Asset.name":
		x.Name = value.Interface().(string)
	case "optimizeglobalcoin.asset.Asset.asset_type":
		x.AssetType = (AssetType)(value.Enum())
	case "optimizeglobalcoin.asset.Asset.jurisdiction":
		x.Jurisdiction = value.Interface().(string)
	case "optimizeglobalcoin.asset.Asset.owner":
		x.Owner = value.Interface().(string)
	case "optimizeglobalcoin.asset.Asset.status":
		x.Status = (AssetStatus)(value.Enum())
	case "optimizeglobalcoin.asset.Asset.value":
		x.Value = value.Message().Interface().(*ValueValidation)
	case "optimizeglobalcoin.asset.Asset.options":
		x.Options = value.Interface().(string)
	case "optimizeglobalcoin.asset.Asset.timestamp":
		x.Timestamp = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: optimizeglobalcoin.asset.Asset"))
		}
		panic(fmt.Errorf("message optimizeglobalcoin.asset.Asset does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Asset) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "optimizeglobalcoin.asset.Asset.value":
		if x.Value == nil {
			x.Value = new(ValueValidation)
		}
		return protoreflect.ValueOfMessage(x.Value.ProtoReflect())
	case "optimizeglobalcoin.asset.Asset.id":
		panic(fmt.Errorf("field id of message optimizeglobalcoin.asset.Asset is not mutable"))
	case "optimizeglobalcoin.asset.Asset.name":
		panic(fmt.Errorf("field name of message optimizeglobalcoin.asset.Asset is not mutable"))
	case "optimizeglobalcoin.asset.Asset.asset_type":
		panic(fmt.Errorf("field asset_type of message optimizeglobalcoin.asset.Asset is not mutable"))
	case "optimizeglobalcoin.asset.Asset.jurisdiction":
		panic(fmt.Errorf("field jurisdiction of message optimizeglobalcoin.asset.Asset is not mutable"))
	case "optimizeglobalcoin.asset.Asset.owner":
		panic(fmt.Errorf("field owner of message optimizeglobalcoin.asset.Asset is not mutable"))
	case "optimizeglobalcoin.asset.Asset.status":
		panic(fmt.Errorf("field status of message optimizeglobalcoin.asset.Asset is not mutable"))
	case "optimizeglobalcoin.asset.Asset.options":
		panic(fmt.Errorf("field options of message optimizeglobalcoin.asset.Asset is not mutable"))
	case "optimizeglobalcoin.asset.Asset.timestamp":
		panic(fmt.Errorf("field timestamp of message optimizeglobalcoin.asset.Asset is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: optimizeglobalcoin.asset.Asset"))
		}
		panic(fmt.Errorf("message optimizeglobalcoin.asset.Asset does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Asset) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "optimizeglobalcoin.asset.Asset.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "optimizeglobalcoin.asset.Asset.name":
		return protoreflect.ValueOfString("")
	case "optimizeglobalcoin.asset.Asset.asset_type":
		return protoreflect.ValueOfEnum(0)
	case "optimizeglobalcoin.asset.Asset.jurisdiction":
		return protoreflect.ValueOfString("")
	case "optimizeglobalcoin.asset.Asset.owner":
		return protoreflect.ValueOfString("")
	case "optimizeglobalcoin.asset.Asset.status":
		return protoreflect.ValueOfEnum(0)
	case "optimizeglobalcoin.asset.Asset.value":
		m := new(ValueValidation)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "optimizeglobalcoin.asset.Asset.options":
		return protoreflect.ValueOfString("")
	case "optimizeglobalcoin.asset.Asset.timestamp":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: optimizeglobalcoin.asset.Asset"))
		}
		panic(fmt.Errorf("message optimizeglobalcoin.asset.Asset does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Asset) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in optimizeglobalcoin.asset.Asset", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Asset) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Asset) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Asset) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Asset) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Asset)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.Name)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.AssetType != 0 {
			n += 1 + runtime.Sov(uint64(x.AssetType))
		}
		l = len(x.Jurisdiction)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Owner)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if x.Value != nil {
			l = options.Size(x.Value)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Options)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Timestamp != 0 {
			n += 1 + runtime.Sov(uint64(x.Timestamp))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Asset)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Timestamp != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Timestamp))
			i--
			dAtA[i] = 0x48
		}
		if len(x.Options) > 0 {
			i -= len(x.Options)
			copy(dAtA[i:], x.Options)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Options)))
			i--
			dAtA[i] = 0x42
		}
		if x.Value != nil {
			encoded, err := options.Marshal(x.Value)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x30
		}
		if len(x.Owner) > 0 {
			i -= len(x.Owner)
			copy(dAtA[i:], x.Owner)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Owner)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Jurisdiction) > 0 {
			i -= len(x.Jurisdiction)
			copy(dAtA[i:], x.Jurisdiction)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Jurisdiction)))
			i--
			dAtA[i] = 0x22
		}
		if x.AssetType != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AssetType))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Name) > 0 {
			i -= len(x.Name)
			copy(dAtA[i:], x.Name)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Name)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Asset)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Asset: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Asset: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Name = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AssetType", wireType)
				}
				x.AssetType = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AssetType |= AssetType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Jurisdiction", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Jurisdiction = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Owner = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= AssetStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Value == nil {
					x.Value = &ValueValidation{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Value); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Options = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
				}
				x.Timestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Timestamp |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: optimizeglobalcoin/asset/asset.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AssetType int32

const (
	AssetType_REAL_ESTATE     AssetType = 0
	AssetType_FINANCIAL_ASSET AssetType = 1
	AssetType_OTHER_ASSET     AssetType = 2
)

// Enum value maps for AssetType.
var (
	AssetType_name = map[int32]string{
		0: "REAL_ESTATE",
		1: "FINANCIAL_ASSET",
		2: "OTHER_ASSET",
	}
	AssetType_value = map[string]int32{
		"REAL_ESTATE":     0,
		"FINANCIAL_ASSET": 1,
		"OTHER_ASSET":     2,
	}
)

func (x AssetType) Enum() *AssetType {
	p := new(AssetType)
	*p = x
	return p
}

func (x AssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_optimizeglobalcoin_asset_asset_proto_enumTypes[0].Descriptor()
}

func (AssetType) Type() protoreflect.EnumType {
	return &file_optimizeglobalcoin_asset_asset_proto_enumTypes[0]
}

func (x AssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetType.Descriptor instead.
func (AssetType) EnumDescriptor() ([]byte, []int) {
	return file_optimizeglobalcoin_asset_asset_proto_rawDescGZIP(), []int{0}
}

type AssetStatus int32

const (
	AssetStatus_PENDING   AssetStatus = 0
	AssetStatus_VALIDATED AssetStatus = 1
	AssetStatus_INVALID   AssetStatus = 2
)

// Enum value maps for AssetStatus.
var (
	AssetStatus_name = map[int32]string{
		0: "PENDING",
		1: "VALIDATED",
		2: "INVALID",
	}
	AssetStatus_value = map[string]int32{
		"PENDING":   0,
		"VALIDATED": 1,
		"INVALID":   2,
	}
)

func (x AssetStatus) Enum() *AssetStatus {
	p := new(AssetStatus)
	*p = x
	return p
}

func (x AssetStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_optimizeglobalcoin_asset_asset_proto_enumTypes[1].Descriptor()
}

func (AssetStatus) Type() protoreflect.EnumType {
	return &file_optimizeglobalcoin_asset_asset_proto_enumTypes[1]
}

func (x AssetStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetStatus.Descriptor instead.
func (AssetStatus) EnumDescriptor() ([]byte, []int) {
	return file_optimizeglobalcoin_asset_asset_proto_rawDescGZIP(), []int{1}
}

type ValueValidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Validators []string `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators,omitempty"`
	ValueUsd   string   `protobuf:"bytes,2,opt,name=value_usd,json=valueUsd,proto3" json:"value_usd,omitempty"`
	Timestamp  uint64   `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ValueValidation) Reset() {
	*x = ValueValidation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_optimizeglobalcoin_asset_asset_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueValidation) ProtoMessage() {}

// Deprecated: Use ValueValidation.ProtoReflect.Descriptor instead.
func (*ValueValidation) Descriptor() ([]byte, []int) {
	return file_optimizeglobalcoin_asset_asset_proto_rawDescGZIP(), []int{0}
}

func (x *ValueValidation) GetValidators() []string {
	if x != nil {
		return x.Validators
	}
	return nil
}

func (x *ValueValidation) GetValueUsd() string {
	if x != nil {
		return x.ValueUsd
	}
	return ""
}

func (x *ValueValidation) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AssetType    AssetType        `protobuf:"varint,3,opt,name=asset_type,json=assetType,proto3,enum=optimizeglobalcoin.asset.AssetType" json:"asset_type,omitempty"`
	Jurisdiction string           `protobuf:"bytes,4,opt,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	Owner        string           `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
	Status       AssetStatus      `protobuf:"varint,6,opt,name=status,proto3,enum=optimizeglobalcoin.asset.AssetStatus" json:"status,omitempty"`
	Value        *ValueValidation `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
	Options      string           `protobuf:"bytes,8,opt,name=options,proto3" json:"options,omitempty"`
	Timestamp    uint64           `protobuf:"varint,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_optimizeglobalcoin_asset_asset_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_optimizeglobalcoin_asset_asset_proto_rawDescGZIP(), []int{1}
}

func (x *Asset) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Asset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Asset) GetAssetType() AssetType {
	if x != nil {
		return x.AssetType
	}
	return AssetType_REAL_ESTATE
}

func (x *Asset) GetJurisdiction() string {
	if x != nil {
		return x.Jurisdiction
	}
	return ""
}

func (x *Asset) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Asset) GetStatus() AssetStatus {
	if x != nil {
		return x.Status
	}
	return AssetStatus_PENDING
}

func (x *Asset) GetValue() *ValueValidation {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Asset) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

func (x *Asset) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

var File_optimizeglobalcoin_asset_asset_proto protoreflect.FileDescriptor

var file_optimizeglobalcoin_asset_asset_proto_rawDesc = []byte{
	0x0a, 0x24, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x22, 0x6c, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x73, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x73, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xe1,
	0x02, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0a,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x65, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x65, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2a, 0x42, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x41, 0x53,
	0x53, 0x45, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x41,
	0x53, 0x53, 0x45, 0x54, 0x10, 0x02, 0x2a, 0x36, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x02, 0x42, 0xdc,
	0x01, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x42,
	0x0a, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x63, 0x6f, 0x69,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0xa2, 0x02,
	0x03, 0x4f, 0x41, 0x58, 0xaa, 0x02, 0x18, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0xca,
	0x02, 0x18, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x63, 0x6f, 0x69, 0x6e, 0x5c, 0x41, 0x73, 0x73, 0x65, 0x74, 0xe2, 0x02, 0x24, 0x4f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x65, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x63, 0x6f, 0x69, 0x6e, 0x5c,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x19, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x63, 0x6f, 0x69, 0x6e, 0x3a, 0x3a, 0x41, 0x73, 0x73, 0x65, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_optimizeglobalcoin_asset_asset_proto_rawDescOnce sync.Once
	file_optimizeglobalcoin_asset_asset_proto_rawDescData = file_optimizeglobalcoin_asset_asset_proto_rawDesc
)

func file_optimizeglobalcoin_asset_asset_proto_rawDescGZIP() []byte {
	file_optimizeglobalcoin_asset_asset_proto_rawDescOnce.Do(func() {
		file_optimizeglobalcoin_asset_asset_proto_rawDescData = protoimpl.X.CompressGZIP(file_optimizeglobalcoin_asset_asset_proto_rawDescData)
	})
	return file_optimizeglobalcoin_asset_asset_proto_rawDescData
}

var file_optimizeglobalcoin_asset_asset_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_optimizeglobalcoin_asset_asset_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_optimizeglobalcoin_asset_asset_proto_goTypes = []interface{}{
	(AssetType)(0),          // 0: optimizeglobalcoin.asset.AssetType
	(AssetStatus)(0),        // 1: optimizeglobalcoin.asset.AssetStatus
	(*ValueValidation)(nil), // 2: optimizeglobalcoin.asset.ValueValidation
	(*Asset)(nil),           // 3: optimizeglobalcoin.asset.Asset
}
var file_optimizeglobalcoin_asset_asset_proto_depIdxs = []int32{
	0, // 0: optimizeglobalcoin.asset.Asset.asset_type:type_name -> optimizeglobalcoin.asset.AssetType
	1, // 1: optimizeglobalcoin.asset.Asset.status:type_name -> optimizeglobalcoin.asset.AssetStatus
	2, // 2: optimizeglobalcoin.asset.Asset.value:type_name -> optimizeglobalcoin.asset.ValueValidation
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_optimizeglobalcoin_asset_asset_proto_init() }
func file_optimizeglobalcoin_asset_asset_proto_init() {
	if File_optimizeglobalcoin_asset_asset_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_optimizeglobalcoin_asset_asset_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueValidation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_optimizeglobalcoin_asset_asset_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_optimizeglobalcoin_asset_asset_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_optimizeglobalcoin_asset_asset_proto_goTypes,
		DependencyIndexes: file_optimizeglobalcoin_asset_asset_proto_depIdxs,
		EnumInfos:         file_optimizeglobalcoin_asset_asset_proto_enumTypes,
		MessageInfos:      file_optimizeglobalcoin_asset_asset_proto_msgTypes,
	}.Build()
	File_optimizeglobalcoin_asset_asset_proto = out.File
	file_optimizeglobalcoin_asset_asset_proto_rawDesc = nil
	file_optimizeglobalcoin_asset_asset_proto_goTypes = nil
	file_optimizeglobalcoin_asset_asset_proto_depIdxs = nil
}
