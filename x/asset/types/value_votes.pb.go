// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: optimizeglobalcoin/asset/value_votes.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ValueVotes struct {
	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Voter    string `protobuf:"bytes,2,opt,name=voter,proto3" json:"voter,omitempty"`
	AssetId  uint64 `protobuf:"varint,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	ValueUsd string `protobuf:"bytes,4,opt,name=value_usd,json=valueUsd,proto3" json:"value_usd,omitempty"`
}

func (m *ValueVotes) Reset()         { *m = ValueVotes{} }
func (m *ValueVotes) String() string { return proto.CompactTextString(m) }
func (*ValueVotes) ProtoMessage()    {}
func (*ValueVotes) Descriptor() ([]byte, []int) {
	return fileDescriptor_f25eaffb7a99196e, []int{0}
}
func (m *ValueVotes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueVotes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueVotes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueVotes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueVotes.Merge(m, src)
}
func (m *ValueVotes) XXX_Size() int {
	return m.Size()
}
func (m *ValueVotes) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueVotes.DiscardUnknown(m)
}

var xxx_messageInfo_ValueVotes proto.InternalMessageInfo

func (m *ValueVotes) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ValueVotes) GetVoter() string {
	if m != nil {
		return m.Voter
	}
	return ""
}

func (m *ValueVotes) GetAssetId() uint64 {
	if m != nil {
		return m.AssetId
	}
	return 0
}

func (m *ValueVotes) GetValueUsd() string {
	if m != nil {
		return m.ValueUsd
	}
	return ""
}

func init() {
	proto.RegisterType((*ValueVotes)(nil), "optimizeglobalcoin.asset.ValueVotes")
}

func init() {
	proto.RegisterFile("optimizeglobalcoin/asset/value_votes.proto", fileDescriptor_f25eaffb7a99196e)
}

var fileDescriptor_f25eaffb7a99196e = []byte{
	// 199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0xca, 0x2f, 0x28, 0xc9,
	0xcc, 0xcd, 0xac, 0x4a, 0x4d, 0xcf, 0xc9, 0x4f, 0x4a, 0xcc, 0x49, 0xce, 0xcf, 0xcc, 0xd3, 0x4f,
	0x2c, 0x2e, 0x4e, 0x2d, 0xd1, 0x2f, 0x4b, 0xcc, 0x29, 0x4d, 0x8d, 0x2f, 0xcb, 0x2f, 0x49, 0x2d,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0xc0, 0x54, 0xab, 0x07, 0x56, 0xab, 0x94, 0xc5,
	0xc5, 0x15, 0x06, 0x52, 0x1e, 0x06, 0x52, 0x2d, 0xc4, 0xc7, 0xc5, 0x94, 0x99, 0x22, 0xc1, 0xa8,
	0xc0, 0xa8, 0xc1, 0x12, 0xc4, 0x94, 0x99, 0x22, 0x24, 0xc2, 0xc5, 0x0a, 0x32, 0xa6, 0x48, 0x82,
	0x49, 0x81, 0x51, 0x83, 0x33, 0x08, 0xc2, 0x11, 0x92, 0xe4, 0xe2, 0x00, 0x6b, 0x8e, 0xcf, 0x4c,
	0x91, 0x60, 0x06, 0xab, 0x65, 0x07, 0xf3, 0x3d, 0x53, 0x84, 0xa4, 0xb9, 0x38, 0x21, 0xb6, 0x97,
	0x16, 0xa7, 0x48, 0xb0, 0x80, 0x35, 0x71, 0x80, 0x05, 0x42, 0x8b, 0x53, 0x9c, 0xac, 0x4e, 0x3c,
	0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e,
	0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x01, 0x8b, 0x5f, 0x2a, 0xa0, 0xbe, 0x29,
	0xa9, 0x2c, 0x48, 0x2d, 0x4e, 0x62, 0x03, 0x7b, 0xc4, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xf4,
	0x4d, 0xc0, 0xa0, 0xf6, 0x00, 0x00, 0x00,
}

func (m *ValueVotes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueVotes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueVotes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValueUsd) > 0 {
		i -= len(m.ValueUsd)
		copy(dAtA[i:], m.ValueUsd)
		i = encodeVarintValueVotes(dAtA, i, uint64(len(m.ValueUsd)))
		i--
		dAtA[i] = 0x22
	}
	if m.AssetId != 0 {
		i = encodeVarintValueVotes(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintValueVotes(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintValueVotes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintValueVotes(dAtA []byte, offset int, v uint64) int {
	offset -= sovValueVotes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValueVotes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovValueVotes(uint64(m.Id))
	}
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovValueVotes(uint64(l))
	}
	if m.AssetId != 0 {
		n += 1 + sovValueVotes(uint64(m.AssetId))
	}
	l = len(m.ValueUsd)
	if l > 0 {
		n += 1 + l + sovValueVotes(uint64(l))
	}
	return n
}

func sovValueVotes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValueVotes(x uint64) (n int) {
	return sovValueVotes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValueVotes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValueVotes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueVotes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueVotes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueVotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueVotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValueVotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValueVotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueVotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValueVotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValueVotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValueVotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValueVotes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValueVotes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValueVotes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValueVotes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValueVotes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValueVotes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValueVotes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValueVotes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValueVotes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValueVotes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValueVotes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValueVotes = fmt.Errorf("proto: unexpected end of group")
)
