// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: optimizeglobalcoin/validator/asset.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AssetType int32

const (
	AssetType_REAL_ESTATE     AssetType = 0
	AssetType_FINANCIAL_ASSET AssetType = 1
	AssetType_OTHER_ASSET     AssetType = 2
)

var AssetType_name = map[int32]string{
	0: "REAL_ESTATE",
	1: "FINANCIAL_ASSET",
	2: "OTHER_ASSET",
}

var AssetType_value = map[string]int32{
	"REAL_ESTATE":     0,
	"FINANCIAL_ASSET": 1,
	"OTHER_ASSET":     2,
}

func (x AssetType) String() string {
	return proto.EnumName(AssetType_name, int32(x))
}

func (AssetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_30ab52029acd76a3, []int{0}
}

type AssetStatus int32

const (
	AssetStatus_PENDING   AssetStatus = 0
	AssetStatus_VALIDATED AssetStatus = 1
	AssetStatus_INVALID   AssetStatus = 2
)

var AssetStatus_name = map[int32]string{
	0: "PENDING",
	1: "VALIDATED",
	2: "INVALID",
}

var AssetStatus_value = map[string]int32{
	"PENDING":   0,
	"VALIDATED": 1,
	"INVALID":   2,
}

func (x AssetStatus) String() string {
	return proto.EnumName(AssetStatus_name, int32(x))
}

func (AssetStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_30ab52029acd76a3, []int{1}
}

type Asset struct {
	Id             uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AssetType      AssetType   `protobuf:"varint,3,opt,name=asset_type,json=assetType,proto3,enum=optimizeglobalcoin.validator.AssetType" json:"asset_type,omitempty"`
	Jurisdiction   string      `protobuf:"bytes,4,opt,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	Owner          string      `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
	Status         AssetStatus `protobuf:"varint,6,opt,name=status,proto3,enum=optimizeglobalcoin.validator.AssetStatus" json:"status,omitempty"`
	ValueValidated string      `protobuf:"bytes,7,opt,name=value_validated,json=valueValidated,proto3" json:"value_validated,omitempty"`
	Options        string      `protobuf:"bytes,8,opt,name=options,proto3" json:"options,omitempty"`
	Timestamp      uint64      `protobuf:"varint,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *Asset) Reset()         { *m = Asset{} }
func (m *Asset) String() string { return proto.CompactTextString(m) }
func (*Asset) ProtoMessage()    {}
func (*Asset) Descriptor() ([]byte, []int) {
	return fileDescriptor_30ab52029acd76a3, []int{0}
}
func (m *Asset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Asset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Asset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Asset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Asset.Merge(m, src)
}
func (m *Asset) XXX_Size() int {
	return m.Size()
}
func (m *Asset) XXX_DiscardUnknown() {
	xxx_messageInfo_Asset.DiscardUnknown(m)
}

var xxx_messageInfo_Asset proto.InternalMessageInfo

func (m *Asset) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Asset) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Asset) GetAssetType() AssetType {
	if m != nil {
		return m.AssetType
	}
	return AssetType_REAL_ESTATE
}

func (m *Asset) GetJurisdiction() string {
	if m != nil {
		return m.Jurisdiction
	}
	return ""
}

func (m *Asset) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Asset) GetStatus() AssetStatus {
	if m != nil {
		return m.Status
	}
	return AssetStatus_PENDING
}

func (m *Asset) GetValueValidated() string {
	if m != nil {
		return m.ValueValidated
	}
	return ""
}

func (m *Asset) GetOptions() string {
	if m != nil {
		return m.Options
	}
	return ""
}

func (m *Asset) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterEnum("optimizeglobalcoin.validator.AssetType", AssetType_name, AssetType_value)
	proto.RegisterEnum("optimizeglobalcoin.validator.AssetStatus", AssetStatus_name, AssetStatus_value)
	proto.RegisterType((*Asset)(nil), "optimizeglobalcoin.validator.Asset")
}

func init() {
	proto.RegisterFile("optimizeglobalcoin/validator/asset.proto", fileDescriptor_30ab52029acd76a3)
}

var fileDescriptor_30ab52029acd76a3 = []byte{
	// 397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x33, 0xb1, 0x3f, 0xcc, 0xab, 0xb6, 0x61, 0xf4, 0x30, 0x87, 0x25, 0x94, 0x45, 0xd8,
	0xb8, 0x87, 0x2c, 0x28, 0x78, 0x14, 0x66, 0x6d, 0x56, 0x03, 0x25, 0x4a, 0x12, 0xf6, 0xe0, 0x25,
	0xcc, 0x6e, 0x06, 0x19, 0x49, 0x32, 0x21, 0x33, 0xad, 0xd6, 0xbf, 0xc2, 0x3f, 0xcb, 0x63, 0xbd,
	0x79, 0x94, 0xf6, 0x1f, 0x91, 0x8c, 0x6d, 0xad, 0x28, 0xe2, 0xed, 0xbd, 0xef, 0xfb, 0xbc, 0xf7,
	0x9d, 0x1f, 0x0f, 0x7c, 0xd9, 0x68, 0x51, 0x89, 0x4f, 0xfc, 0x5d, 0x29, 0x6f, 0x58, 0x79, 0x2b,
	0x45, 0x7d, 0xb1, 0x64, 0xa5, 0x28, 0x98, 0x96, 0xed, 0x05, 0x53, 0x8a, 0xeb, 0xa0, 0x69, 0xa5,
	0x96, 0xf8, 0xe4, 0x4f, 0x32, 0x38, 0x90, 0xa7, 0x5f, 0x6d, 0xe8, 0xd3, 0x8e, 0xc6, 0x63, 0xb0,
	0x45, 0x41, 0xd0, 0x14, 0xf9, 0xbd, 0xc4, 0x16, 0x05, 0xc6, 0xd0, 0xab, 0x59, 0xc5, 0x89, 0x3d,
	0x45, 0xbe, 0x93, 0x98, 0x18, 0x5f, 0x01, 0x98, 0xd1, 0xb9, 0x5e, 0x35, 0x9c, 0xdc, 0x99, 0x22,
	0x7f, 0xfc, 0xe4, 0x2c, 0xf8, 0x97, 0x41, 0x60, 0x86, 0x67, 0xab, 0x86, 0x27, 0x0e, 0xdb, 0x87,
	0xf8, 0x14, 0xee, 0xbd, 0x5f, 0xb4, 0x42, 0x15, 0xe2, 0x56, 0x0b, 0x59, 0x93, 0x9e, 0xf1, 0xf8,
	0x4d, 0xc3, 0x0f, 0xa1, 0x2f, 0x3f, 0xd4, 0xbc, 0x25, 0x7d, 0x53, 0xfc, 0x99, 0x60, 0x0a, 0x03,
	0xa5, 0x99, 0x5e, 0x28, 0x32, 0x30, 0xee, 0x8f, 0xff, 0xc3, 0x3d, 0x35, 0x0d, 0xc9, 0xae, 0x11,
	0x9f, 0xc1, 0x64, 0xc9, 0xca, 0x05, 0xcf, 0x77, 0x18, 0x2f, 0xc8, 0xd0, 0x58, 0x8c, 0x8d, 0x7c,
	0xbd, 0x57, 0x31, 0x81, 0x61, 0x37, 0x5c, 0xd6, 0x8a, 0xdc, 0x35, 0xc0, 0x3e, 0xc5, 0x27, 0xe0,
	0x68, 0x51, 0x71, 0xa5, 0x59, 0xd5, 0x10, 0xc7, 0x3c, 0xd9, 0x2f, 0xe1, 0xfc, 0x12, 0x9c, 0xc3,
	0xad, 0xf1, 0x04, 0x46, 0x49, 0x48, 0xe7, 0x79, 0x98, 0x66, 0x34, 0x0b, 0x5d, 0x0b, 0x3f, 0x80,
	0xc9, 0x55, 0x14, 0xd3, 0xf8, 0x45, 0x44, 0xe7, 0x39, 0x4d, 0xd3, 0x30, 0x73, 0x51, 0x47, 0xbd,
	0xce, 0x5e, 0x85, 0xc9, 0x4e, 0xb0, 0xcf, 0x9f, 0xc1, 0xe8, 0xe8, 0xec, 0x78, 0x04, 0xc3, 0x37,
	0x61, 0x3c, 0x8b, 0xe2, 0x97, 0xae, 0x85, 0xef, 0x83, 0x73, 0x4d, 0xe7, 0xd1, 0x8c, 0x66, 0xe1,
	0xcc, 0x45, 0x5d, 0x2d, 0x8a, 0x8d, 0xe0, 0xda, 0x97, 0xcf, 0xbf, 0x6c, 0x3c, 0xb4, 0xde, 0x78,
	0xe8, 0xfb, 0xc6, 0x43, 0x9f, 0xb7, 0x9e, 0xb5, 0xde, 0x7a, 0xd6, 0xb7, 0xad, 0x67, 0xbd, 0x7d,
	0xf4, 0x97, 0x8d, 0xf9, 0x78, 0xb4, 0x33, 0xdd, 0x97, 0xaa, 0x9b, 0x81, 0x59, 0x9a, 0xa7, 0x3f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x48, 0x70, 0x19, 0x12, 0x60, 0x02, 0x00, 0x00,
}

func (m *Asset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Asset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Asset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintAsset(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Options) > 0 {
		i -= len(m.Options)
		copy(dAtA[i:], m.Options)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Options)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ValueValidated) > 0 {
		i -= len(m.ValueValidated)
		copy(dAtA[i:], m.ValueValidated)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.ValueValidated)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Status != 0 {
		i = encodeVarintAsset(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Jurisdiction) > 0 {
		i -= len(m.Jurisdiction)
		copy(dAtA[i:], m.Jurisdiction)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Jurisdiction)))
		i--
		dAtA[i] = 0x22
	}
	if m.AssetType != 0 {
		i = encodeVarintAsset(dAtA, i, uint64(m.AssetType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintAsset(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAsset(dAtA []byte, offset int, v uint64) int {
	offset -= sovAsset(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Asset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAsset(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	if m.AssetType != 0 {
		n += 1 + sovAsset(uint64(m.AssetType))
	}
	l = len(m.Jurisdiction)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovAsset(uint64(m.Status))
	}
	l = len(m.ValueValidated)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	l = len(m.Options)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovAsset(uint64(m.Timestamp))
	}
	return n
}

func sovAsset(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAsset(x uint64) (n int) {
	return sovAsset(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Asset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Asset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Asset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetType", wireType)
			}
			m.AssetType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetType |= AssetType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jurisdiction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jurisdiction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= AssetStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueValidated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueValidated = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAsset(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAsset
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAsset
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAsset
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAsset        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAsset          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAsset = fmt.Errorf("proto: unexpected end of group")
)
