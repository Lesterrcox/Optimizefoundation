// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: optimizeglobalcoin/validator/validator.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ValidatorType int32

const (
	ValidatorType_UNRECOGNIZED   ValidatorType = 0
	ValidatorType_PROTECTORS     ValidatorType = 1
	ValidatorType_CONFIRMERS     ValidatorType = 2
	ValidatorType_AUDITORS       ValidatorType = 3
	ValidatorType_LAWYERS        ValidatorType = 4
	ValidatorType_ASSET_MANAGERS ValidatorType = 5
	ValidatorType_OTHER          ValidatorType = 6
)

var ValidatorType_name = map[int32]string{
	0: "UNRECOGNIZED",
	1: "PROTECTORS",
	2: "CONFIRMERS",
	3: "AUDITORS",
	4: "LAWYERS",
	5: "ASSET_MANAGERS",
	6: "OTHER",
}

var ValidatorType_value = map[string]int32{
	"UNRECOGNIZED":   0,
	"PROTECTORS":     1,
	"CONFIRMERS":     2,
	"AUDITORS":       3,
	"LAWYERS":        4,
	"ASSET_MANAGERS": 5,
	"OTHER":          6,
}

func (x ValidatorType) String() string {
	return proto.EnumName(ValidatorType_name, int32(x))
}

func (ValidatorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d344eb5ab4b56de4, []int{0}
}

type ValidatorStatus int32

const (
	ValidatorStatus_ACTIVE   ValidatorStatus = 0
	ValidatorStatus_INACTIVE ValidatorStatus = 1
)

var ValidatorStatus_name = map[int32]string{
	0: "ACTIVE",
	1: "INACTIVE",
}

var ValidatorStatus_value = map[string]int32{
	"ACTIVE":   0,
	"INACTIVE": 1,
}

func (x ValidatorStatus) String() string {
	return proto.EnumName(ValidatorStatus_name, int32(x))
}

func (ValidatorStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d344eb5ab4b56de4, []int{1}
}

type Validator struct {
	Id         uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Category   ValidatorType   `protobuf:"varint,3,opt,name=category,proto3,enum=optimizeglobalcoin.validator.ValidatorType" json:"category,omitempty"`
	Timestamp  uint64          `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	OgcAddress string          `protobuf:"bytes,5,opt,name=ogcAddress,proto3" json:"ogcAddress,omitempty"`
	KycInfo    string          `protobuf:"bytes,6,opt,name=kycInfo,proto3" json:"kycInfo,omitempty"`
	Options    string          `protobuf:"bytes,7,opt,name=options,proto3" json:"options,omitempty"`
	Status     ValidatorStatus `protobuf:"varint,8,opt,name=status,proto3,enum=optimizeglobalcoin.validator.ValidatorStatus" json:"status,omitempty"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_d344eb5ab4b56de4, []int{0}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

func (m *Validator) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Validator) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Validator) GetCategory() ValidatorType {
	if m != nil {
		return m.Category
	}
	return ValidatorType_UNRECOGNIZED
}

func (m *Validator) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Validator) GetOgcAddress() string {
	if m != nil {
		return m.OgcAddress
	}
	return ""
}

func (m *Validator) GetKycInfo() string {
	if m != nil {
		return m.KycInfo
	}
	return ""
}

func (m *Validator) GetOptions() string {
	if m != nil {
		return m.Options
	}
	return ""
}

func (m *Validator) GetStatus() ValidatorStatus {
	if m != nil {
		return m.Status
	}
	return ValidatorStatus_ACTIVE
}

func init() {
	proto.RegisterEnum("optimizeglobalcoin.validator.ValidatorType", ValidatorType_name, ValidatorType_value)
	proto.RegisterEnum("optimizeglobalcoin.validator.ValidatorStatus", ValidatorStatus_name, ValidatorStatus_value)
	proto.RegisterType((*Validator)(nil), "optimizeglobalcoin.validator.Validator")
}

func init() {
	proto.RegisterFile("optimizeglobalcoin/validator/validator.proto", fileDescriptor_d344eb5ab4b56de4)
}

var fileDescriptor_d344eb5ab4b56de4 = []byte{
	// 402 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x6f, 0xd3, 0x40,
	0x14, 0xf4, 0xba, 0x89, 0x93, 0x3c, 0x8a, 0xb1, 0xde, 0x69, 0x0f, 0x95, 0x15, 0x21, 0x0e, 0x51,
	0x0b, 0x46, 0x82, 0x3b, 0x92, 0x71, 0x97, 0x60, 0x89, 0xda, 0x68, 0xed, 0x16, 0xd1, 0x0b, 0x72,
	0x6d, 0x13, 0x59, 0xc4, 0x5e, 0xcb, 0x5e, 0x10, 0x86, 0x3f, 0xc1, 0x5f, 0xe1, 0x5f, 0x70, 0xec,
	0x91, 0x23, 0x4a, 0xfe, 0x08, 0xf2, 0x92, 0xa6, 0xe1, 0x43, 0xa8, 0xb7, 0x9d, 0x99, 0x37, 0xef,
	0xcd, 0x4a, 0x03, 0xf7, 0x45, 0x2d, 0x8b, 0xb2, 0xf8, 0x94, 0x2f, 0x96, 0xe2, 0x22, 0x59, 0xa6,
	0xa2, 0xa8, 0x1e, 0x7e, 0x48, 0x96, 0x45, 0x96, 0x48, 0xd1, 0x5c, 0xbf, 0x9c, 0xba, 0x11, 0x52,
	0xe0, 0xc1, 0xdf, 0xd3, 0xce, 0x76, 0xe6, 0xee, 0x57, 0x1d, 0x26, 0x67, 0x57, 0x08, 0x4d, 0xd0,
	0x8b, 0x8c, 0x92, 0x29, 0x99, 0x0d, 0xb8, 0x5e, 0x64, 0x88, 0x30, 0xa8, 0x92, 0x32, 0xa7, 0xfa,
	0x94, 0xcc, 0x26, 0x5c, 0xbd, 0x71, 0x0e, 0xe3, 0x34, 0x91, 0xf9, 0x42, 0x34, 0x1d, 0xdd, 0x9b,
	0x92, 0x99, 0xf9, 0xe8, 0xc8, 0xf9, 0xdf, 0x09, 0x67, 0xbb, 0x3e, 0xee, 0xea, 0x9c, 0x6f, 0xcd,
	0x78, 0x00, 0x13, 0x59, 0x94, 0x79, 0x2b, 0x93, 0xb2, 0xa6, 0x03, 0x75, 0xf3, 0x9a, 0x40, 0x1b,
	0x40, 0x2c, 0x52, 0x37, 0xcb, 0x9a, 0xbc, 0x6d, 0xe9, 0x50, 0x05, 0xd8, 0x61, 0x90, 0xc2, 0xe8,
	0x5d, 0x97, 0xfa, 0xd5, 0x5b, 0x41, 0x0d, 0x25, 0x5e, 0xc1, 0x5e, 0xe9, 0xf3, 0x88, 0xaa, 0xa5,
	0xa3, 0x5f, 0xca, 0x06, 0x22, 0x03, 0xa3, 0x95, 0x89, 0x7c, 0xdf, 0xd2, 0xb1, 0x0a, 0xfe, 0xe0,
	0x86, 0xc1, 0x23, 0x65, 0xe2, 0x1b, 0xf3, 0xe1, 0x67, 0xb8, 0xfd, 0xdb, 0x9f, 0xd0, 0x82, 0xfd,
	0xd3, 0x80, 0x33, 0x2f, 0x9c, 0x07, 0xfe, 0x39, 0x3b, 0xb6, 0x34, 0x34, 0x01, 0x5e, 0xf2, 0x30,
	0x66, 0x5e, 0x1c, 0xf2, 0xc8, 0x22, 0x3d, 0xf6, 0xc2, 0xe0, 0x99, 0xcf, 0x4f, 0x18, 0x8f, 0x2c,
	0x1d, 0xf7, 0x61, 0xec, 0x9e, 0x1e, 0xfb, 0x4a, 0xdd, 0xc3, 0x5b, 0x30, 0x7a, 0xe1, 0xbe, 0x7a,
	0xdd, 0x4b, 0x03, 0x44, 0x30, 0xdd, 0x28, 0x62, 0xf1, 0x9b, 0x13, 0x37, 0x70, 0xe7, 0x3d, 0x37,
	0xc4, 0x09, 0x0c, 0xc3, 0xf8, 0x39, 0xe3, 0x96, 0x71, 0x78, 0x04, 0x77, 0xfe, 0xc8, 0x85, 0x00,
	0x86, 0xeb, 0xc5, 0xfe, 0x19, 0xb3, 0xb4, 0x7e, 0xb1, 0x1f, 0x6c, 0x10, 0x79, 0xfa, 0xe4, 0xdb,
	0xca, 0x26, 0x97, 0x2b, 0x9b, 0xfc, 0x58, 0xd9, 0xe4, 0xcb, 0xda, 0xd6, 0x2e, 0xd7, 0xb6, 0xf6,
	0x7d, 0x6d, 0x6b, 0xe7, 0xf7, 0xfe, 0xd1, 0xa1, 0x8f, 0x3b, 0x2d, 0x92, 0x5d, 0x9d, 0xb7, 0x17,
	0x86, 0xaa, 0xd0, 0xe3, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x56, 0xc9, 0x40, 0x72, 0x02,
	0x00, 0x00,
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Options) > 0 {
		i -= len(m.Options)
		copy(dAtA[i:], m.Options)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Options)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.KycInfo) > 0 {
		i -= len(m.KycInfo)
		copy(dAtA[i:], m.KycInfo)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.KycInfo)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OgcAddress) > 0 {
		i -= len(m.OgcAddress)
		copy(dAtA[i:], m.OgcAddress)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.OgcAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Timestamp != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	if m.Category != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintValidator(dAtA []byte, offset int, v uint64) int {
	offset -= sovValidator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovValidator(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	if m.Category != 0 {
		n += 1 + sovValidator(uint64(m.Category))
	}
	if m.Timestamp != 0 {
		n += 1 + sovValidator(uint64(m.Timestamp))
	}
	l = len(m.OgcAddress)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.KycInfo)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.Options)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovValidator(uint64(m.Status))
	}
	return n
}

func sovValidator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValidator(x uint64) (n int) {
	return sovValidator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= ValidatorType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OgcAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OgcAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KycInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KycInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ValidatorStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValidator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValidator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValidator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValidator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValidator = fmt.Errorf("proto: unexpected end of group")
)
